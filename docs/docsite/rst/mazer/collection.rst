==========================
Ansible Content Collection
==========================

The Manifest format
===================

The ``galaxy.yml`` for each package is called its manifest. It must be a
file in ``YAML`` format that has the structure described below.

.. code-block:: yaml

   name: "geerlinguy.jenkins"
   version: "3.5.0"
   authors: ["Jeff Geerling <geerlingguy@mac.com>"]
   license: "(BSD-3-Clause OR MIT)"
   description: "Install and configure Jenkins CI server."

   keywords: ["development", "packaging", "jenkins", "ci"]

   documentation: "https://github.com/geerlingguy/ansible-role-jenkins/blob/master/README.md"
   repository: "https://github.com/geerlingguy/ansible-role-jenkins/"

   readme: "README.md"

   dependencies:
     "geerlinguy.java": "1.3.0"

Common fields
-------------

``name``
^^^^^^^^

A collection namespace and name separated by dot character:

.. code-block:: yaml

  name: "geerlinguy.jenkins"

In the example above ``geerlinguy`` is a collection namespace and a ``jenkins``
is its name. There are a few rules you should follow to name your collection:

* Use only lower case alphanumerical characters, dashes (``-``)
  and underscores (``-``).
* The namespace and name cannot start with a dash or an underscore.
* The namespace and name cannot contain multiple consecutive
  dashes or underscores.

``version``
^^^^^^^^^^^

A collection version. Galaxy uses `Semantic Versioning <https://semver.org/>`_
for collection versions, so you should follow some basic rules:

* Use version numbers with three numeric parts such as ``1.0.0`` rather than ``1.0``.

``authors``
^^^^^^^^^^^

The list of collection authors. Each author is a string with a name and
optionally email and url:

.. code-block:: yaml

  authors:
    - "Alice Williams <awilliams@example.com>"
    - "Bob Smith (http://bsmith.example.com)"
    - "Jack Jackson"

``description``
^^^^^^^^^^^^^^^

A short summary description of the collection.

``license``
^^^^^^^^^^^

A license of a collection. If you are using a common license such as
3-Clause BSD or MIT, add a current SPDX license identifier for the license
you are using:

.. code-block:: yaml

  license: "MIT"

You should use `The SPDX License List <https://spdx.org/licenses/>`_ if your
collection is released under one of the licenses included in that list.
Usually `OSI Approvded <https://opensource.org/licenses/alphabetical>`_
licenses are more preferrable.

Multiple licenses can be specified by using a `License Expression <https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60>`_
syntax with ``AND`` and ``OR`` operators:

.. code-block:: yaml

  license: "(BSD-3-Clause OR MIT)"

``license_file``
^^^^^^^^^^^^^^^^

If the project is using a nonstandard license, then this field can be used
in lieu of ``license`` field and must point to a file that contains text
of the license (similar to the ``readme`` field).

``keywords``
^^^^^^^^^^^^

A list of collection keywords. Keywords must be alphanumerical string values.

Project URLs
^^^^^^^^^^^^

You can specify URLs related to your project (e.g. repository or documentation
web pages). This helpful for people who want to contribute.

* ``documentation`` field - the URL to a website hosting the collection's
  documentation.
* ``repository`` field - the URL to a place where your code lives.
* ``homepage`` field - the URL to the project homepage.

Dependencies
^^^^^^^^^^^^

A collection may depend on other collections. Dependencies are specified
in ``dependencies`` section as a mapping between collection name and a
version string. The version string is a semver version spec:

.. code-block:: yaml

  dependencies:
    geerlinguy.java: "1.3.0"


The ``MANIFEST.json`` file
==========================

The ``MANIFEST.json`` file is required to be located at the root level of
collection artifact. It is automatically generated by ``mazer`` tool
and contains collection manifest attributes and additional information
about collection structure and its contents.

Whereas ``galaxy.yml`` contains manifest in human friednly format and allows
multiple fields formats such as simplified dependency definition syntax,
``MANIFEST.json`` should is used by galaxy server to import package and
should be explicit and unambiguous:

.. code-block:: json

  {
    "format": 1,
    "name": "geerlinguy.jenkins",
    "version": "3.5.0",
    "authors": [
      { "name": "Jeff Geerling", "email": null, "url": null }
    ],
    "keywords": ["development", "packaging", "jenkins", "ci"],
    "description": "Install and configure Jenkins CI server",
    "license": "(BSD-3-Clause OR MIT)",
    "license_file": null,
    "readme": "README.md",

    "dependencies": {
      "geerlinguy.java": {"version": "1.3.0"},
      "geerlinguy.nginx": {
        "git": "http://github.com/geerlinguy/ansible-role-nginx.git",
        "branch": null
      }
    },

    "content": {
      "roles": [
        {
          "name": "geerlinguy.java",
          "path": "geernlinguy.java/roles/geerlinguy.java",
          "reeadme": "geerlinguy.java/roles/geernlinguy.java/README.md",
        }
      ],
      "modules": [
         {
           "name": "java_installer",
           "path": "geerlinguy.java/modules/java_installer.py",
         }
      ]
    },

    "files": {
      "geerlinguy.java/roles/geerlinguy.java/meta/main.yml": {
        "sha256": "918cee54b0be5828703c3c84bba8bed68fb45adc5e4e335890fb3d1e82a804f9"
      },
      "geerlinguy.java/roles/geerlinguy.java/README.md": {
        "sha256": "bcba05b43ac347e963c2ffbb4758870416ef1e75bd1bf0cd30057931258725b0"
      }
    }
  }

Collection artifact
===================

As a result of collection build process a collection artifact gets generates.
A collection artifact is an archive in ``.tar.gz`` format, which contains
``MANIFEST.json`` at root level and collection contents.

Collection artifact filename should have the following format:

.. code-block:: none

  {namespace}-{name}-{version}.tar.gz

Each component of the filename is escaped by replacing dash (``-``)characters
with an underscore (``_``).

Example collection artifact structure:

.. code-block:: none

  my_namespace-my_collection-1.0.0.tar.gz
  ├── roles/
  │   ├── role_a/
  │   │   └── ...
  │   └── role_a/
  │       └── ...
  └── MANIFEST.json

