# restore-galaxy-db.yml
#
#  Pulls a copy of the production DB from S3, decrypts, and loads it on the target DB host, 
#  replacing the existing galaxy DB. Be careful, it REPLACES the galaxy DB on the target.
#
# run cmd: ansible-playbook -i ec2.py --extra-vars=@your-var-file.yml restore-galaxy-db.yml
#
---

- name: Check for credentials
  hosts: localhost
  gather_facts: no
  connection: local
  vars:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
  tasks:
    - assert:
        that:
          - aws_access_key is defined and aws_access_key != ""
          - aws_secret_key is defined and aws_access_key != ""
        msg: "Environmnt variables AWS_ACCESS_KEY_ID and/or AWS_SECRET_ACCESS_KEY not defined !!"
       
- name: Stop web server processes
  hosts: "{{ galaxy_hosts_web }}"
  become: yes 
  tasks: 
    - name: Stop apache
      service:
        name: httpd
        state: stopped 

- name: Stop celery processes 
  hosts: "{{ galaxy_hosts_celery }}"
  become: yes 
  tasks: 
    - name: Stop supervisor 
      service:
        name: supervisord 
        state: stopped 

- name: Stop secondary database
  hosts: "{{ galaxy_hosts_db }}"
  become: yes 
  tasks: 
    - name: Stop postgresql
      service:
        name: postgresql 
        state: stopped 
      when: ec2_tag_galaxy_postgres == 'slave'

- name: Pull a copy of the production DB from S3, and install it.
  hosts: "{{ galaxy_hosts_db }}" 
  become: yes
  roles:

    # Restore the database to the master node
    - role: galaxy-restore-db
      galaxy_encryption_password: "{{ galaxy_backup_enc_key }}"
      aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}" 
      when: ec2_tag_galaxy_postgres == 'master'

- name: Restart web server processes
  hosts: "{{ galaxy_hosts_web }}"
  become: yes 
  tasks: 
    - name: Restart apache
      service:
        name: httpd
        state: restarted 

- name: Restart celery processes 
  hosts: "{{ galaxy_hosts_celery }}"
  become: yes 
  tasks: 
    - name: Restart supervisor 
      service:
        name: supervisord 
        state: restarted 

- name: Rebuild elasticsearch indexes 
  hosts: "{{ galaxy_hosts_web }}"
  become: yes 
  tasks:
 
  # Only run tasks on the first host in the group
  - name: Rebuild Search Indexes
    shell: "galaxy-manage rebuild_index --noinput"
    environment:
      DJANGO_SETTINGS_MODULE: galaxy.settings.custom
    when: inventory_hostname == groups[galaxy_hosts_web][0]

  - name: Rebuild custom search indexes
    shell: "galaxy-manage rebuild_galaxy_indexes"
    environment:
      DJANGO_SETTINGS_MODULE: galaxy.settings.custom
    when: inventory_hostname == groups[galaxy_hosts_web][0]

